#!/usr/bin/env bash

# License: See LICENSE

set -e

declare _port=8080
declare _ip=127.0.0.1
declare -a _query

#-----------------------------------------------------------------------------
usage() {
  cat <<USAGE
Usage: ${0##*/} <command> [options] [command specific options]
  OPTIONS:
  -h, --help  This.

  COMMANDS:
    start     Start the HTTP server
      -p, --port <port number>  default: 8080
      -i, --ip <address>        default: 127.0.0.1

    request   Handle an HTTP request

USAGE
}

#-----------------------------------------------------------------------------
start_server() {
  socat TCP-LISTEN:${_port},crnl,fork EXEC:"$0 request"
}

#-----------------------------------------------------------------------------
http_headers() {
  local _code="$1"
  local _text="$2"
  printf -v _time "%(%a, %d %b %Y %H:%M:%S %Z)T" -1

  echo <<-HTTP
HTTP/1.1 $_code $_text"
Server: nope
Date: ${_time}
Content-Type: text/plain
Content-Length: 128
Connection: close

HTTP
}

#-----------------------------------------------------------------------------
http_ok() {
  http_headers 200 OK
}

#-----------------------------------------------------------------------------
http_forbidden() {
  http_headers 403 Forbidden
}

#-----------------------------------------------------------------------------
parse_query_string() {
  read -rs -a _query < <(echo "$1" | sed -e 's/^\/*//' -e 's/[\/\?&+]/ /g' -e 's/%20/ /g' -e 's/[^a-z0-9= ,]//g' -e 's/  */ /' -e 's/ *= */=/g')
}
#-----------------------------------------------------------------------------
get() {
  local _app="${_query[0]}"

  case "$_app" in
    # blink1)
    #   blink1
    #   ;;

    *)
      echo "$_app is unsupported."
      ;;
  esac
}

#-----------------------------------------------------------------------------
handle_request() {
  local _query_string

  while read -rs __method __query_string _version ; do
    if [[ "${__method^^}" == "GET" ]] ; then
      _query_string="${__query_string,,}"
    elif [[ -z "$__method" ]] ; then
      break
    fi
  done

  if [[ -n "$_query_string" ]] ; then
    parse_query_string "$_query_string"
    http_ok
    get
  else
    http_forbidden
  fi
}

#-----------------------------------------------------------------------------
[[ $# -eq 0 ]] && usage

declare _command
_command="$1" ; shift

while [[ $# -gt 1 ]] ; do
  curr_arg="$1" ; shift
  if [[ $# -gt 0 ]] ; then next_arg="$1" ; shift ; else next_arg="" ; fi
  case "$curr_arg" in
    -h|--help|help) usage ;;
    -p|--port) _port=$next_arg ;;
    -i|--ip)   _ip=$next_arg ;;
  esac
done

case "$_command" in
  start)
    start_server
    ;;

  request)
    handle_request
    ;;

  *) usage ;;
esac

